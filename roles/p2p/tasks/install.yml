- name: Containers internal network
  docker_network:
    name: p2p

- name: Rtorrent
  docker_container:
    name: rtorrent
    image: xataz/rtorrent-rutorrent:latest
    state: started
    hostname: rtorrent
    tty: yes
    # restart: yes
    pull: yes
    restart_policy: on-failure
    restart_retries: 2
    cpu_period: 100000
    cpu_quota: 150000
    env:
      UID: "{{ p2p_uid }}"
      GID: "{{ group_gid }}"
    ports:
      - "45000:45000"
    volumes:
      - "{{ rtorrent_config }}:/config"
      - "{{ rtorrent_config }}/rtorrent/sessions:/data/.session"
      - "{{ rtorrent_downloads }}:/p2p/downloads"
      - "/etc/localtime:/etc/localtime:ro"
    networks:
      - name: p2p
    labels:
      traefik.docker.network: "p2p"
      traefik.enable: "true"
      traefik.basic.frontend.rule: "Host:rtorrent.{{ domain }}"
      traefik.frontend.auth.basic.users: "{{ rutorrent_basicauth_user }}:{{ rutorrent_basicauth_password | password_hash('blowfish') }}"
      traefik.basic.port: "8080"

- name: Plex
  docker_container:
    name: plex
    image: plexinc/pms-docker:latest
    state: started
    hostname: plex
    pull: yes
    restart_policy: unless-stopped
    env:
      PLEX_UID: "{{ plex_uid }}"
      PLEX_GID: "{{ group_gid }}"
      PLEX_CLAIM: "{{ plex_claim_token }}"
      ADVERTISE_IP: "{{ ansible_host }}"
    volumes:
      - "{{ plex_movies }}:/data/movies"
      - "{{ plex_tv }}:/data/tv"
      - "{{ plex_transcode }}:/transcode"
      - "{{ plex_config }}:/config"
      - "/etc/localtime:/etc/localtime:ro"
    ports:
      - "32400:32400"
    networks:
      - name: p2p
        ipv4_address: "{{ plex_docker_ip }}"
    labels:
      traefik.docker.network: "p2p"
      traefik.enable: "true"
      traefik.basic.frontend.rule: "Host:plex.{{ domain }}"
      traefik.basic.port: "32400"

- name: Jackett
  docker_container:
    name: jackett
    image: linuxserver/jackett:latest
    state: started
    hostname: jackett
    pull: yes
    restart_policy: on-failure
    restart_retries: 2
    volumes:
      - "/etc/jackett:/config/Jackett"
      - "{{ torrent_blackhole }}:/downloads"
      - "/etc/localtime:/etc/localtime:ro"
    env:
      PUID: "{{ p2p_uid }}"
      PGID: "{{ group_gid }}"
    networks:
      - name: p2p
    labels:
      traefik.docker.network: "p2p"
      traefik.enable: "true"
      traefik.basic.frontend.rule: "Host:jackett.{{ domain }}"
      traefik.basic.port: "9117"

- name: Radarr
  docker_container:
    name: radarr
    image: linuxserver/radarr:latest
    state: started
    hostname: radarr
    pull: yes
    restart_policy: on-failure
    restart_retries: 2
    volumes:
      - "/etc/radarr:/config"
      - "{{ medias_root }}:/p2p"
      - "/etc/localtime:/etc/localtime:ro"
    env:
      PUID: "{{ p2p_uid }}"
      PGID: "{{ group_gid }}"
    networks:
      - name: p2p
        links:
          - rtorrent:rtorrent
          - jackett:jackett
    labels:
      traefik.docker.network: "p2p"
      traefik.enable: "true"
      traefik.basic.frontend.rule: "Host:radarr.{{ domain }}"
      traefik.basic.port: "7878"

- name: Sonarr
  docker_container:
    name: sonarr
    image: linuxserver/sonarr:latest
    state: started
    hostname: sonarr
    pull: yes
    restart_policy: on-failure
    restart_retries: 2
    volumes:
      - "/etc/sonarr:/config"
      - "{{ medias_root }}:/p2p"
      - "/etc/localtime:/etc/localtime:ro"
    env:
      PUID: "{{ p2p_uid }}"
      PGID: "{{ group_gid }}"
    networks:
      - name: p2p
        links:
          - rtorrent:rtorrent
          - jackett:jackett
    labels:
      traefik.docker.network: "p2p"
      traefik.enable: "true"
      traefik.basic.frontend.rule: "Host:sonarr.{{ domain }}"
      traefik.basic.port: "8989"

- name: Bazarr
  docker_container:
    name: bazarr
    image: linuxserver/bazarr:latest
    state: started
    hostname: bazarr
    pull: yes
    restart_policy: on-failure
    restart_retries: 2
    env:
      PUID: "{{ p2p_uid }}"
      PGID: "{{ group_gid }}"
    volumes:
      - "{{ plex_movies }}:/movies"
      - "{{ plex_tv }}:/tv"
      - "{{ bazarr_config }}:/config"
      - "/etc/localtime:/etc/localtime:ro"
    networks:
      - name: p2p
        links:
          - sonarr:sonarr
          - radarr:radarr
    labels:
      traefik.docker.network: "p2p"
      traefik.enable: "true"
      traefik.basic.frontend.rule: "Host:bazarr.{{ domain }}"
      traefik.basic.port: "6767"

- name: Tautulli
  docker_container:
    name: tautulli
    image: tautulli/tautulli:latest
    state: started
    hostname: tautulli
    pull: yes
    restart_policy: on-failure
    restart_retries: 2
    volumes:
      - "/etc/tautulli:/config"
      - "{{ plex_config }}/Library/Application Support/Plex Media Server/Logs:/plex_logs:ro"
      - "/etc/localtime:/etc/localtime:ro"
    env:
      PUID: "{{ p2p_uid }}"
      PGID: "{{ group_gid }}"
    networks:
      - name: p2p
    labels:
      traefik.docker.network: "p2p"
      traefik.enable: "true"
      traefik.basic.frontend.rule: "Host:tautulli.{{ domain }}"
      traefik.basic.port: "8181"

- name: Ombi
  docker_container:
    name: ombi
    image: linuxserver/ombi:latest
    state: started
    hostname: ombi
    pull: yes
    restart_policy: on-failure
    restart_retries: 2
    volumes:
      - "/etc/ombi:/config"
      - "/etc/localtime:/etc/localtime:ro"
    env:
      PUID: "{{ p2p_uid }}"
      PGID: "{{ group_gid }}"
    networks:
      - name: p2p
        links:
          - plex:plex
          - sonarr:sonarr
          - radarr:radarr
    labels:
      traefik.docker.network: "p2p"
      traefik.enable: "true"
      traefik.basic.frontend.rule: "Host:ombi.{{ domain }}"
      traefik.basic.port: "3579"

- name: Netdata
  docker_container:
    name: netdata
    image: firehol/netdata:latest
    pull: yes
    state: started
    hostname: netdata
    restart_policy: on-failure
    restart_retries: 2
    capabilities: "SYS_PTRACE"
    env:
      PUID: "{{ netdata_uid }}"
      PGID: 989 # Docker GID for socket permissions
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - name: p2p
    labels:
      traefik.docker.network: "p2p"
      traefik.enable: "true"
      traefik.basic.frontend.rule: "Host:metrics.{{ domain }}"
      traefik.frontend.auth.basic.users: "{{ metrics_basicauth_user }}:{{ metrics_basicauth_password | password_hash('blowfish') }}"
      traefik.basic.port: "19999"

- name: Portainer
  docker_container:
    name: portainer
    image: portainer/portainer:latest
    hostname: portainer
    state: started
    pull: yes
    restart_policy: on-failure
    restart_retries: 2
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/var/portainer:/data"
    networks:
      - name: p2p
    labels:
      traefik.docker.network: "p2p"
      traefik.enable: "true"
      traefik.basic.frontend.rule: "Host:portainer.{{ domain }}"
      traefik.basic.port: "9000"

- name: Ensures traefik dir exists
  file:
    path: "{{ traefik_dir }}"
    state: directory

- name: Ensures acme.json file exists
  file:
    path: "{{ traefik_dir }}/acme.json"
    state: touch
    mode: 0600

- name: Adding traefik.toml file
  template:
    src: traefik.toml.j2
    dest: "{{ traefik_dir }}/traefik.toml"
    mode: 0600

- name: Create the traefik container
  docker_container:
    name: traefik
    image: traefik
    restart_policy: unless-stopped
    networks:
      - name: p2p
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "{{ traefik_dir }}/traefik.toml:/etc/traefik/traefik.toml"
      - "{{ traefik_dir }}/acme.json:/acme.json"
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      traefik.frontend.rule: "Host:traefik.{{ domain }}"
      traefik.docker.network: "p2p"
      traefik.port: "8080"
      traefik.enable: "true"
      traefik.frontend.auth.basic.users: "{{ traefik_user }}:{{ traefik_password | password_hash('blowfish') }}"
    env:
      OVH_ENDPOINT: "{{ ovh_endpoint }}"
      OVH_APPLICATION_KEY: "{{ ovh_application_key }}"
      OVH_APPLICATION_SECRET: "{{ ovh_application_secret }}"
      OVH_CONSUMER_KEY: "{{ ovh_consumer_key }}"

- name: Cleaning unused images and volumes
  shell: |
    docker image prune -af
    docker volume prune -f
